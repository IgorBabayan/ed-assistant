name: Build and Release EdAssistant

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version number"
        required: true
        default: "1.0.0"

env:
  DOTNET_VERSION: "8.0.x"
  APP_NAME: "EdAssistant"
  PROJECT_PATH: "EdAssistant.Desktop/EdAssistant.Desktop.csproj"

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          fi

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build and publish for all platforms
        run: |
          # Create releases directory
          mkdir -p releases

          # Build for Windows x86
          echo "Building for Windows x86..."
          dotnet publish ${{ env.PROJECT_PATH }} \
            -c Release \
            -r win-x86 \
            --self-contained true \
            -p:PublishSingleFile=true \
            -p:IncludeNativeLibrariesForSelfExtract=true \
            -p:EnableCompressionInSingleFile=true \
            -p:AssemblyVersion=${{ steps.version.outputs.version }} \
            -o releases/win-x86

          # Build for Windows x64
          echo "Building for Windows x64..."
          dotnet publish ${{ env.PROJECT_PATH }} \
            -c Release \
            -r win-x64 \
            --self-contained true \
            -p:PublishSingleFile=true \
            -p:IncludeNativeLibrariesForSelfExtract=true \
            -p:EnableCompressionInSingleFile=true \
            -p:AssemblyVersion=${{ steps.version.outputs.version }} \
            -o releases/win-x64

          # Build for Linux x64
          echo "Building for Linux x64..."
          dotnet publish ${{ env.PROJECT_PATH }} \
            -c Release \
            -r linux-x64 \
            --self-contained true \
            -p:PublishSingleFile=true \
            -p:IncludeNativeLibrariesForSelfExtract=true \
            -p:EnableCompressionInSingleFile=true \
            -p:AssemblyVersion=${{ steps.version.outputs.version }} \
            -o releases/linux-x64

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-builds
          path: releases/

  create-windows-installers:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: app-builds
          path: releases/

      - name: Install NSIS
        run: |
          sudo apt-get update
          sudo apt-get install -y nsis

      - name: Create LICENSE file
        run: |
          cat > LICENSE.txt << 'EOF'
          MIT License

          Copyright (c) $(date +%Y) EdAssistant

          Permission is hereby granted, free of charge, to any person obtaining a copy
          of this software and associated documentation files (the "Software"), to deal
          in the Software without restriction, including without limitation the rights
          to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
          copies of the Software, and to permit persons to whom the Software is
          furnished to do so, subject to the following conditions:

          The above copyright notice and this permission notice shall be included in all
          copies or substantial portions of the Software.

          THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
          IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
          FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
          AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
          LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
          OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
          SOFTWARE.
          EOF

      - name: Create Windows x64 installer
        run: |
          cat > installer-x64.nsi << 'EOF'
          !include "MUI2.nsh"

          Name "EdAssistant - Elite Dangerous Assistant"
          OutFile "EdAssistant-Setup-x64.exe"
          InstallDir "$PROGRAMFILES64\EdAssistant"
          InstallDirRegKey HKCU "Software\EdAssistant" ""
          RequestExecutionLevel admin

          !define MUI_ABORTWARNING
          !define MUI_ICON "EdAssistant.Desktop\logo.ico"
          !define MUI_UNICON "EdAssistant.Desktop\logo.ico"

          !insertmacro MUI_PAGE_WELCOME
          !insertmacro MUI_PAGE_LICENSE "LICENSE.txt"
          !insertmacro MUI_PAGE_COMPONENTS
          !insertmacro MUI_PAGE_DIRECTORY
          !insertmacro MUI_PAGE_INSTFILES
          !insertmacro MUI_PAGE_FINISH

          !insertmacro MUI_UNPAGE_WELCOME
          !insertmacro MUI_UNPAGE_CONFIRM
          !insertmacro MUI_UNPAGE_INSTFILES
          !insertmacro MUI_UNPAGE_FINISH

          !insertmacro MUI_LANGUAGE "English"

          Section "EdAssistant" SecMain
            SectionIn RO
            SetOutPath "$INSTDIR"
            File /r "releases\win-x64\*"

            CreateDirectory "$SMPROGRAMS\EdAssistant"
            CreateShortCut "$SMPROGRAMS\EdAssistant\EdAssistant.lnk" "$INSTDIR\EdAssistant.Desktop.exe"
            CreateShortCut "$SMPROGRAMS\EdAssistant\Uninstall.lnk" "$INSTDIR\Uninstall.exe"
            CreateShortCut "$DESKTOP\EdAssistant.lnk" "$INSTDIR\EdAssistant.Desktop.exe"

            WriteRegStr HKCU "Software\EdAssistant" "" $INSTDIR
            WriteUninstaller "$INSTDIR\Uninstall.exe"

            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\EdAssistant" "DisplayName" "EdAssistant"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\EdAssistant" "UninstallString" "$INSTDIR\Uninstall.exe"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\EdAssistant" "DisplayIcon" "$INSTDIR\EdAssistant.Desktop.exe"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\EdAssistant" "Publisher" "EdAssistant Team"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\EdAssistant" "DisplayVersion" "${{ needs.build.outputs.version }}"
          SectionEnd

          Section "Auto-start with Windows" SecAutoStart
            CreateShortCut "$SMSTARTUP\EdAssistant.lnk" "$INSTDIR\EdAssistant.Desktop.exe"
          SectionEnd

          Section "Uninstall"
            Delete "$INSTDIR\*.*"
            RMDir /r "$INSTDIR"
            Delete "$SMPROGRAMS\EdAssistant\*.*"
            RMDir "$SMPROGRAMS\EdAssistant"
            Delete "$DESKTOP\EdAssistant.lnk"
            Delete "$SMSTARTUP\EdAssistant.lnk"
            DeleteRegKey /ifempty HKCU "Software\EdAssistant"
            DeleteRegKey HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\EdAssistant"
          SectionEnd
          EOF

          makensis installer-x64.nsi

      - name: Create Windows x86 installer
        run: |
          cat > installer-x86.nsi << 'EOF'
          !include "MUI2.nsh"

          Name "EdAssistant - Elite Dangerous Assistant"
          OutFile "EdAssistant-Setup-x86.exe"
          InstallDir "$PROGRAMFILES32\EdAssistant"
          InstallDirRegKey HKCU "Software\EdAssistant" ""
          RequestExecutionLevel admin

          !define MUI_ABORTWARNING
          !define MUI_ICON "EdAssistant.Desktop\logo.ico"
          !define MUI_UNICON "EdAssistant.Desktop\logo.ico"

          !insertmacro MUI_PAGE_WELCOME
          !insertmacro MUI_PAGE_LICENSE "LICENSE.txt"
          !insertmacro MUI_PAGE_COMPONENTS
          !insertmacro MUI_PAGE_DIRECTORY
          !insertmacro MUI_PAGE_INSTFILES
          !insertmacro MUI_PAGE_FINISH

          !insertmacro MUI_UNPAGE_WELCOME
          !insertmacro MUI_UNPAGE_CONFIRM
          !insertmacro MUI_UNPAGE_INSTFILES
          !insertmacro MUI_UNPAGE_FINISH

          !insertmacro MUI_LANGUAGE "English"

          Section "EdAssistant" SecMain
            SectionIn RO
            SetOutPath "$INSTDIR"
            File /r "releases\win-x86\*"

            CreateDirectory "$SMPROGRAMS\EdAssistant"
            CreateShortCut "$SMPROGRAMS\EdAssistant\EdAssistant.lnk" "$INSTDIR\EdAssistant.Desktop.exe"
            CreateShortCut "$SMPROGRAMS\EdAssistant\Uninstall.lnk" "$INSTDIR\Uninstall.exe"
            CreateShortCut "$DESKTOP\EdAssistant.lnk" "$INSTDIR\EdAssistant.Desktop.exe"

            WriteRegStr HKCU "Software\EdAssistant" "" $INSTDIR
            WriteUninstaller "$INSTDIR\Uninstall.exe"

            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\EdAssistant" "DisplayName" "EdAssistant (32-bit)"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\EdAssistant" "UninstallString" "$INSTDIR\Uninstall.exe"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\EdAssistant" "DisplayIcon" "$INSTDIR\EdAssistant.Desktop.exe"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\EdAssistant" "Publisher" "EdAssistant Team"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\EdAssistant" "DisplayVersion" "${{ needs.build.outputs.version }}"
          SectionEnd

          Section "Auto-start with Windows" SecAutoStart
            CreateShortCut "$SMSTARTUP\EdAssistant.lnk" "$INSTDIR\EdAssistant.Desktop.exe"
          SectionEnd

          Section "Uninstall"
            Delete "$INSTDIR\*.*"
            RMDir /r "$INSTDIR"
            Delete "$SMPROGRAMS\EdAssistant\*.*"
            RMDir "$SMPROGRAMS\EdAssistant"
            Delete "$DESKTOP\EdAssistant.lnk"
            Delete "$SMSTARTUP\EdAssistant.lnk"
            DeleteRegKey /ifempty HKCU "Software\EdAssistant"
            DeleteRegKey HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\EdAssistant"
          SectionEnd
          EOF

          makensis installer-x86.nsi

      - name: Upload Windows installers
        uses: actions/upload-artifact@v4
        with:
          name: windows-installers
          path: |
            EdAssistant-Setup-x64.exe
            EdAssistant-Setup-x86.exe

  create-linux-packages:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: app-builds
          path: releases/

      - name: Install packaging tools
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev rpm alien fuse libfuse2 imagemagick

      - name: Convert icon to PNG
        run: |
          # Convert ico to png if imagemagick is available
          if [ -f "EdAssistant.Desktop/logo.ico" ]; then
            convert "EdAssistant.Desktop/logo.ico[0]" -resize 256x256 edassistant.png
          else
            # Create a placeholder icon
            convert -size 256x256 xc:blue edassistant.png
          fi

      - name: Create .deb package
        run: |
          VERSION="${{ needs.build.outputs.version }}"
          ARCH="amd64"

          # Create package structure
          mkdir -p "deb-package/DEBIAN"
          mkdir -p "deb-package/opt/edassistant"
          mkdir -p "deb-package/usr/share/applications"
          mkdir -p "deb-package/usr/share/icons/hicolor/256x256/apps"
          mkdir -p "deb-package/usr/bin"

          # Copy application files
          cp -r releases/linux-x64/* "deb-package/opt/edassistant/"
          chmod +x "deb-package/opt/edassistant/EdAssistant.Desktop"

          # Create launcher script
          cat > "deb-package/usr/bin/edassistant" << 'EOF'
          #!/bin/bash
          cd /opt/edassistant
          exec ./EdAssistant.Desktop "$@"
          EOF
          chmod +x "deb-package/usr/bin/edassistant"

          # Control file
          cat > "deb-package/DEBIAN/control" << EOF
          Package: edassistant
          Version: $VERSION
          Section: games
          Priority: optional
          Architecture: $ARCH
          Depends: libc6, libgcc-s1, libstdc++6
          Maintainer: EdAssistant Team <info@edassistant.com>
          Description: Elite Dangerous Assistant
           A comprehensive assistant tool for Elite Dangerous players
           providing journal monitoring, cargo management, and system information.
          EOF

          # Desktop file
          cat > "deb-package/usr/share/applications/edassistant.desktop" << EOF
          [Desktop Entry]
          Type=Application
          Name=EdAssistant
          Comment=Elite Dangerous Assistant
          Exec=edassistant
          Icon=edassistant
          Categories=Game;Utility;
          StartupWMClass=EdAssistant
          Terminal=false
          EOF

          # Copy icon
          cp edassistant.png "deb-package/usr/share/icons/hicolor/256x256/apps/edassistant.png"

          # Build package
          dpkg-deb --build deb-package "edassistant_${VERSION}_${ARCH}.deb"

      - name: Create .rpm package
        run: |
          VERSION="${{ needs.build.outputs.version }}"

          # Create RPM build structure
          mkdir -p rpmbuild/{BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS}

          # Create tarball
          mkdir -p edassistant-$VERSION
          cp -r releases/linux-x64/* edassistant-$VERSION/
          cp edassistant.png edassistant-$VERSION/
          tar -czf rpmbuild/SOURCES/edassistant-$VERSION.tar.gz edassistant-$VERSION/

          # Create spec file
          cat > rpmbuild/SPECS/edassistant.spec << EOF
          Name:           edassistant
          Version:        $VERSION
          Release:        1%{?dist}
          Summary:        Elite Dangerous Assistant

          License:        MIT
          URL:            https://github.com/yourusername/EdAssistant
          Source0:        %{name}-%{version}.tar.gz

          BuildRequires:
          Requires:

          %description
          A comprehensive assistant tool for Elite Dangerous players
          providing journal monitoring, cargo management, and system information.

          %prep
          %setup -q

          %build

          %install
          mkdir -p %{buildroot}/opt/edassistant
          mkdir -p %{buildroot}/usr/bin
          mkdir -p %{buildroot}/usr/share/applications
          mkdir -p %{buildroot}/usr/share/icons/hicolor/256x256/apps

          cp -r * %{buildroot}/opt/edassistant/
          chmod +x %{buildroot}/opt/edassistant/EdAssistant.Desktop

          # Create launcher script
          cat > %{buildroot}/usr/bin/edassistant << 'EOFSCRIPT'
          #!/bin/bash
          cd /opt/edassistant
          exec ./EdAssistant.Desktop "\$@"
          EOFSCRIPT
          chmod +x %{buildroot}/usr/bin/edassistant

          # Desktop file
          cat > %{buildroot}/usr/share/applications/edassistant.desktop << 'EOFDESKTOP'
          [Desktop Entry]
          Type=Application
          Name=EdAssistant
          Comment=Elite Dangerous Assistant
          Exec=edassistant
          Icon=edassistant
          Categories=Game;Utility;
          StartupWMClass=EdAssistant
          Terminal=false
          EOFDESKTOP

          cp edassistant.png %{buildroot}/usr/share/icons/hicolor/256x256/apps/edassistant.png

          %files
          /opt/edassistant/*
          /usr/bin/edassistant
          /usr/share/applications/edassistant.desktop
          /usr/share/icons/hicolor/256x256/apps/edassistant.png

          %changelog
          * $(date +'%a %b %d %Y') EdAssistant Team <info@edassistant.com> - $VERSION-1
          - Initial release
          EOF

          # Build RPM
          rpmbuild --define "_topdir $(pwd)/rpmbuild" -bb rpmbuild/SPECS/edassistant.spec

          # Copy to releases
          cp rpmbuild/RPMS/x86_64/edassistant-*.rpm ./

      - name: Create AppImage
        run: |
          VERSION="${{ needs.build.outputs.version }}"

          # Create AppDir structure
          mkdir -p AppDir/usr/bin
          mkdir -p AppDir/usr/share/applications
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps

          # Copy application
          cp -r releases/linux-x64/* AppDir/usr/bin/
          chmod +x AppDir/usr/bin/EdAssistant.Desktop

          # Create desktop file
          cat > AppDir/usr/share/applications/edassistant.desktop << EOF
          [Desktop Entry]
          Type=Application
          Name=EdAssistant
          Comment=Elite Dangerous Assistant
          Exec=EdAssistant.Desktop
          Icon=edassistant
          Categories=Game;Utility;
          StartupWMClass=EdAssistant
          Terminal=false
          EOF

          # Copy icon
          cp edassistant.png AppDir/usr/share/icons/hicolor/256x256/apps/edassistant.png
          cp edassistant.png AppDir/edassistant.png

          # Create AppRun
          cat > AppDir/AppRun << 'EOF'
          #!/bin/bash
          cd "$(dirname "$0")"
          exec ./usr/bin/EdAssistant.Desktop "$@"
          EOF
          chmod +x AppDir/AppRun

          # Create .DirIcon
          cp edassistant.png AppDir/.DirIcon

          # Download and run appimagetool
          wget -c https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage

          # Create AppImage
          ARCH=x86_64 ./appimagetool-x86_64.AppImage AppDir EdAssistant-$VERSION-x86_64.AppImage

      - name: Upload Linux packages
        uses: actions/upload-artifact@v4
        with:
          name: linux-packages
          path: |
            *.deb
            *.rpm
            *.AppImage

  create-release:
    needs: [build, create-windows-installers, create-linux-packages]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event_name == 'workflow_dispatch' && format('v{0}', github.event.inputs.version) || github.ref_name }}
          name: "EdAssistant ${{ needs.build.outputs.version }}"
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            windows-installers/EdAssistant-Setup-x64.exe
            windows-installers/EdAssistant-Setup-x86.exe
            linux-packages/*.deb
            linux-packages/*.rpm
            linux-packages/*.AppImage
            app-builds/win-x64/EdAssistant.Desktop.exe
            app-builds/win-x86/EdAssistant.Desktop.exe
            app-builds/linux-x64/EdAssistant.Desktop
          body: |
            ## EdAssistant v${{ needs.build.outputs.version }}

            Elite Dangerous Assistant - A comprehensive tool for Elite Dangerous players.

            ### Downloads

            **Windows:**
            - `EdAssistant-Setup-x64.exe` - Windows 64-bit installer (recommended)
            - `EdAssistant-Setup-x86.exe` - Windows 32-bit installer
            - `EdAssistant.Desktop.exe` - Portable executable (64-bit)

            **Linux:**
            - `EdAssistant-*.AppImage` - Universal Linux package (recommended)
            - `edassistant_*.deb` - Debian/Ubuntu package
            - `edassistant-*.rpm` - RedHat/Fedora/SUSE package
            - `EdAssistant.Desktop` - Portable executable

            ### Installation Instructions

            **Windows:**
            1. Download and run the installer for your architecture
            2. Follow the installation wizard
            3. Launch from Start Menu or Desktop shortcut

            **Linux:**
            - **AppImage:** Download, make executable (`chmod +x`), and run
            - **DEB:** `sudo dpkg -i edassistant_*.deb`
            - **RPM:** `sudo rpm -i edassistant-*.rpm`

            ### Requirements
            - No additional dependencies required (self-contained)
            - Elite Dangerous journal access for full functionality
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
